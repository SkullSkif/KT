#line 2 "cool-flex-lexer.cc"

#line 4 "cool-flex-lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	(yytext_ptr) -= (yy_more_len); \
	yyleng = (int) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 59
#define YY_END_OF_BUFFER 60
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[625] =
    {   0,
        0,    0,    2,    2,    7,    7,   10,   10,   60,   58,
       35,   37,    9,   53,   54,   44,   42,   57,   43,   48,
       45,   32,   55,   49,   46,   47,   56,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   51,
       52,   50,    2,    2,    3,    2,    3,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    7,    7,    8,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,   10,   10,   13,   14,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   58,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   35,
        1,    5,    6,   32,   39,   40,   41,   36,   36,   36,
       36,   36,   17,   18,   19,   36,   36,   36,   36,   36,

       28,   36,   36,   36,   38,   38,   38,   38,   38,   38,
       17,   18,   19,   38,   38,   38,   38,   38,   28,   38,
       38,   38,   38,    2,    2,    4,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    7,    7,    1,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       10,   10,    5,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   11,   12,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   36,   36,   36,   36,   36,
       36,   21,   36,   29,   31,   36,   36,   36,   38,   38,
       38,   38,   38,   38,   38,   21,   38,   29,   31,   38,
       38,   38,   38,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   26,   36,   16,
       27,   36,   36,   22,   23,   24,   36,   26,   38,   16,
       27,   38,   38,   38,   22,   23,   24,   33,   38,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   15,   36,   36,   25,   15,
       34,   38,   38,   25,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    7,    7,    7,    7,    7,    7,    7,
        7,    7,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   36,   30,   38,   30,    2,    2,    2,    2,    7,

        7,    7,    7,   10,   10,   10,   10,   36,   38,    2,
        2,    7,    7,   10,   10,   20,   20,    2,    2,    7,
        7,   10,   10,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    4,    1,    1,    1,    1,    1,    5,
        6,    7,    8,    9,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,    1,   19,   20,   21,   22,   23,   24,   25,
       21,   26,   27,   21,   21,   28,   21,   29,   30,   31,
       21,   32,   33,   34,   35,   36,   37,   21,   21,   21,
        1,   38,    1,    1,   39,    1,   40,   41,   42,   43,

       44,   45,   41,   46,   47,   41,   41,   48,   41,   49,
       50,   51,   41,   52,   53,   54,   55,   56,   57,   41,
       41,   41,   58,    1,   59,   60,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[61] =
    {   0,
        1,    1,    2,    3,    4,    1,    4,    1,    1,    1,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    3,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    1,    1,    1
    } ;

static const flex_int16_t yy_base[637] =
    {   0,
        0,    0,   60,    0,  120,    0,  180,    0,  670, 3043,
      628, 3043, 3043,  615, 3043,  613, 3043, 3043,  607, 3043,
     3043,  603, 3043, 3043,  231,  597, 3043,    0,  222,  216,
      216,  222,  222,  229,  220,  224,  230,  231,    0,  240,
      250,  262,  261,  257,  261,  259,  262,  267,  269, 3043,
     3043, 3043,    0,  611,  605,    0,  570,    0,    0,    0,
        0,    0,  546,    0,    0,  306,  522,    0,  323,  383,
      316,  323,  424,  384,  385,  327,  338,  390,  419,  477,
      537,  470,  428,  578,  477,  484,  426,  530,  541,  546,
        0,    0,    0,    0,  528, 3043,  509,    0,  478,    0,

        0,    0,    0,    0,  450,    0,    0,  311,  443,    0,
      631,  691,  551,  581,  732,  631,  632,  638,  637,  692,
      695,  785,  845,  694,  697,  886,  734,  785,  708,  778,
      846,  791,    0,    0,    0,    0,  456, 3043, 3043,    0,
        0,  416,    0,    0,    0,    0,    0,  406,    0,    0,
      336,  372,    0,  939,  999,  735,  794, 1040,  847,  888,
      882,  932,  939,  943,  370, 1093, 1153,  848,  946, 1194,
     1000, 1001, 1036, 1042, 1093, 1006,    0,    0,    0,  360,
     3043, 3043, 3043,  335, 3043, 3043, 3043,    0,  264,  280,
      312,  334,    0,    0,  331,  323,  326,  346,  369,  373,

        0,  387,  396,  423,    0,  427,  442,  466,  480,  474,
        0,    0,  480,  473,  477,  483,  505,  510,    0,  533,
      544,  547,  563,    0,  328, 3043,  313,    0,    0,    0,
      792, 1094,  889, 1095,  948, 1015, 1096, 1154, 1159, 1156,
     1158, 1109, 1196, 1157, 1198, 1197, 1229, 1212, 1231, 1233,
     1234, 1235, 1238, 1252, 1265, 1268, 1270, 1269, 1271, 1287,
     1300, 1302, 1309, 1323, 1318, 1341,    0,  320,    0,    0,
      305,    0,    0,    0, 1332, 1342, 1336, 1358, 1357, 1359,
     1372, 1376, 1373, 1397, 1398, 1395, 1399, 1414, 1429, 1416,
     1438, 1435, 1448, 1452, 1454, 1469, 1470, 1471, 1475, 1486,

     1485, 1488, 1507, 1511, 1510, 1525, 1526, 1543, 1542, 1552,
        0,  306,    0,  283,    0,    0,    0, 1541, 1565, 1566,
     1568, 1575, 1582, 1584, 1591, 1600, 1607, 1614, 1623, 1618,
     1605, 1629, 1650, 1648, 3043, 3043, 1645, 1664, 1661, 1680,
     1663, 1679, 1682, 1686, 1695, 1696, 1711, 1718, 1727, 1722,
     1709, 1733, 1754, 1751, 1760,  576,  572,  590,  602,  629,
      624,    0,  633,    0,    0,  640,  697,  731,  783,  777,
      792,  816,  836,  846,  849,    0,  849,    0,    0,  885,
      894,  937,  936, 1765, 1783, 1790, 1797, 1800, 1813, 1807,
     1826, 1822, 1831, 1832, 1836, 1847, 1858, 1861, 1868, 1871,

     1877, 1898, 1901, 1887, 1908, 1904, 1917, 1927, 1933, 1930,
     1940, 1959, 1944, 1965, 1974, 1980, 1991, 1970, 1995, 1997,
     2010, 2012, 2027, 2014, 2029, 2031, 2046, 2060, 2063, 2061,
     2067, 2078, 2092, 2093, 2094, 2099, 2108, 2125, 2110, 2131,
     2134, 2140, 2150, 2157, 2163, 2166, 2176, 2180, 2182, 2189,
     2203, 2198, 2216, 2214, 2221, 2235, 2238, 2248, 2254, 2253,
     2259, 2269, 2275, 2278, 2285, 2288, 2291,    0,  937,    0,
        0,  943,  965,    0,    0,    0,  978,    0,  970,    0,
        0, 1009, 1034, 1040,    0,    0,    0,    0, 1047, 2301,
     2302, 2317, 2318, 2320, 2334, 2323, 2336, 2339, 2349, 2350,

     2355, 2366, 2371, 2372, 2381, 2390, 2387, 2403, 2404, 2406,
     2421, 2408, 2422, 2419, 2438, 2440, 2454, 2443, 2456, 2457,
     2475, 2470, 2480, 2486, 2489, 2507, 2504, 2518, 2502, 2520,
     2521, 2534, 2539, 2544, 2553, 2550, 2557, 2568, 2575, 2571,
     2584, 2589, 2590, 2593, 2607, 2608, 2611, 2622, 2625, 2641,
     2624, 2643, 2647, 2654, 2656,    0, 1050, 1083,    0,    0,
        0, 1091, 1097,    0, 2658, 2665, 2687, 2681, 2683, 2688,
     2697, 2718, 2694, 2712, 2723, 2734, 2719, 2728, 2744, 2753,
     2755, 2759, 2766, 2769, 2782, 2784, 2791, 2793, 2800, 2795,
     2806, 1096,    0, 1149,    0, 2816, 2809, 2825, 2832, 2835,

     2838, 2848, 2857, 2864, 2867, 2880, 2871, 1156, 1279, 2873,
     2889, 2903, 2905, 2907, 2921,    0,    0, 2904, 2937, 2939,
     2942, 2943, 2944, 3043,  256,  253, 2992, 2997, 3002, 3007,
     3012, 3017, 3022, 3027, 3032, 3037
    } ;

static const flex_int16_t yy_def[637] =
    {   0,
      624,    1,  624,    3,  624,    5,  624,    7,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  624,
      624,  624,  627,  627,  624,  627,  624,  627,  627,  627,
      627,  627,  627,  627,  627,  627,  627,  627,  628,  628,
       70,   70,   70,   70,   70,   70,   70,   70,   70,  629,
      629,   81,   81,   81,   81,   81,   81,   81,   81,   81,
      627,  627,  627,  630,  630,  624,  630,  630,  630,  630,

      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      631,  631,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  632,  632,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  630,  630,  630,  633,  633,  624,  624,  633,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  633,  634,  634,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  635,  636,  636,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  633,  633,  633,  624,
      624,  624,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  625,  625,

      625,  625,  625,  625,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,  627,  627,  624,  627,  627,  627,  627,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,  630,  630,  630,  630,
      630,  630,  630,  630,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  123,  123,  123,  123,  123,  123,  123,  123,  123,

      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      633,  633,  633,  633,  633,  633,  633,  155,  155,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  155,  624,  624,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  625,  625,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  625,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,  626,
      626,  626,  626,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  155,
      155,  155,  155,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  625,  625,  625,
      625,  625,  625,  625,  625,  625,  625,  626,  626,  626,
      626,  626,  626,  626,  626,  626,  626,  626,  626,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  155,  155,  155,  155,  155,  155,  155,
      155,  155,  155,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  625,  625,  625,  625,  626,
      626,  626,  626,  626,   70,   70,   70,   70,   81,   81,
       81,   81,   81,  112,  112,  112,  112,  123,  123,  123,
      123,  123,  155,  155,  155,  155,  167,  167,  167,  167,
      167,  625,  625,  626,  626,   70,   70,   81,   81,  112,

      112,  123,  123,  155,  155,  167,  167,  625,  626,   70,
       81,  112,  123,  155,  167,  625,  626,   70,   81,  112,
      123,  155,  167,    0,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624
    } ;

static const flex_int16_t yy_nxt[3104] =
    {   0,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   10,   27,   28,
       28,   29,   28,   30,   31,   28,   32,   33,   34,   35,
       36,   28,   28,   37,   28,   28,   38,   10,   10,   39,
       39,   40,   39,   41,   42,   39,   43,   44,   45,   46,
       47,   39,   39,   48,   39,   39,   49,   50,   51,   52,
       53,   54,   12,   53,   55,   56,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   53,   68,   69,
       69,   70,   69,   71,   72,   69,   73,   74,   75,   76,
       77,   69,   69,   78,   69,   69,   79,   53,   53,   80,

       80,   81,   80,   82,   83,   80,   84,   85,   86,   87,
       88,   80,   80,   89,   80,   80,   90,   91,   92,   93,
       94,   95,   96,   94,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  109,   94,  110,  111,
      111,  112,  111,  113,  114,  111,  115,  116,  117,  118,
      119,  111,  111,  120,  111,  111,  121,   94,   94,  122,
      122,  123,  122,  124,  125,  122,  126,  127,  128,  129,
      130,  122,  122,  131,  122,  122,  132,  133,  134,  135,
      136,  137,  138,  139,  140,  141,  142,  143,  144,  145,
      146,  147,  148,  149,  150,  151,  152,  136,  153,  154,

      154,  155,  154,  156,  157,  154,  158,  159,  160,  161,
      162,  154,  154,  163,  154,  154,  164,  165,  136,  166,
      166,  167,  166,  168,  169,  166,  170,  171,  172,  173,
      174,  166,  166,  175,  166,  166,  176,  177,  178,  179,
      185,  189,  193,  191,  201,  197,  194,  186,  192,  190,
      195,  198,  199,  202,  196,  203,  204,  205,  200,  206,
      188,  189,  193,  191,  201,  197,  194,  207,  192,  190,
      195,  198,  199,  202,  196,  203,  204,  208,  200,  206,
      215,  210,  209,  219,  217,  212,  216,  207,  211,  213,
      218,  220,  221,  214,  223,  314,  356,  208,  222,  357,

      215,  210,  209,  219,  217,  212,  216,  312,  211,  213,
      218,  220,  221,  214,  223,  228,  356,  271,  222,  357,
      272,  268,  229,  224,  224,  227,  224,  273,  224,  225,
      224,  224,  224,  224,  224,  231,  224,  224,  224,  224,
      224,  224,  231,  234,  358,  315,  231,  184,  235,  236,
      231,  244,  316,  359,  231,  231,  360,  231,  361,  362,
      224,  180,  231,  234,  358,  231,  231,  245,  235,  236,
      231,  244,  336,  359,  231,  363,  360,  231,  361,  362,
      224,  224,  224,  224,  224,  231,  224,  245,  224,  317,
      224,  224,  224,  224,  224,  363,  224,  224,  224,  224,

      224,  224,  232,  231,  231,  364,  365,  240,  242,  231,
      233,  231,  231,  241,  243,  246,  366,  231,  314,  367,
      224,  313,  232,  231,  231,  364,  365,  240,  242,  231,
      233,  231,  231,  241,  243,  246,  366,  231,  231,  367,
      224,  224,  224,  231,  247,  248,  231,  253,  237,  368,
      262,  231,  238,  248,  254,  248,  239,  312,  231,  369,
      274,  370,  271,  231,  247,  248,  231,  253,  237,  368,
      262,  231,  238,  248,  254,  248,  239,  224,  224,  369,
      224,  370,  224,  270,  224,  224,  224,  224,  224,  248,
      224,  224,  224,  224,  224,  224,  248,  251,  371,  372,

      258,  373,  252,  248,  248,  374,  259,  260,  375,  248,
      376,  248,  377,  261,  224,  269,  248,  251,  371,  372,
      258,  373,  252,  248,  248,  374,  259,  260,  375,  268,
      376,  248,  377,  261,  224,  224,  224,  224,  224,  230,
      224,  378,  224,  379,  224,  224,  224,  224,  224,  248,
      224,  224,  224,  224,  224,  224,  249,  248,  227,  263,
      248,  378,  380,  379,  250,  248,  264,  381,  248,  248,
      275,  266,  265,  248,  224,  226,  249,  248,  278,  263,
      248,  382,  380,  279,  250,  248,  264,  381,  248,  383,
      275,  266,  265,  248,  224,  224,  224,  248,  278,  468,

      275,  382,  255,  279,  469,  248,  256,  280,  275,  383,
      257,  181,  225,  470,  187,  184,  183,  248,  182,  468,
      275,  181,  255,  471,  469,  248,  256,  280,  275,  180,
      257,  267,  267,  470,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  471,  267,  267,  267,  267,  267,  267,
      275,  275,  472,  473,  284,  286,  275,  275,  275,  275,
      285,  287,  288,  474,  275,  275,  289,  475,  267,  624,
      275,  275,  472,  473,  284,  286,  275,  275,  275,  275,
      285,  287,  288,  474,  275,  275,  289,  475,  267,  267,
      267,  267,  267,  624,  267,  267,  267,  267,  267,  267,

      267,  267,  267,  624,  267,  267,  267,  267,  267,  267,
      276,  275,  624,  292,  275,  624,  297,  290,  277,  275,
      291,  295,  275,  298,  292,  476,  296,  292,  267,  624,
      276,  275,  306,  292,  275,  292,  297,  290,  277,  275,
      291,  295,  275,  298,  292,  476,  296,  292,  267,  267,
      267,  275,  306,  292,  318,  292,  281,  302,  477,  275,
      282,  292,  321,  303,  283,  624,  624,  322,  624,  624,
      624,  275,  624,  292,  318,  624,  281,  302,  477,  275,
      282,  292,  321,  303,  283,  267,  267,  322,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  292,  267,  267,

      267,  267,  267,  267,  292,  292,  478,  307,  304,  479,
      292,  231,  292,  318,  305,  480,  310,  292,  292,  231,
      323,  318,  267,  624,  292,  292,  478,  307,  304,  479,
      292,  231,  292,  318,  305,  480,  310,  481,  292,  231,
      323,  318,  267,  267,  267,  267,  267,  624,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  481,  267,  267,
      267,  267,  267,  267,  293,  292,  318,  337,  482,  483,
      327,  308,  294,  292,  318,  340,  328,  309,  484,  485,
      341,  624,  267,  624,  293,  292,  318,  337,  482,  483,
      327,  308,  294,  292,  318,  340,  328,  309,  484,  485,

      341,  318,  267,  267,  267,  292,  331,  318,  385,  318,
      299,  329,  486,  292,  300,  318,  231,  330,  301,  624,
      624,  318,  487,  624,  624,  292,  331,  318,  385,  318,
      299,  329,  486,  292,  300,  318,  231,  330,  301,  311,
      311,  624,  487,  311,  311,  311,  311,  311,  311,  311,
      311,  318,  311,  311,  311,  311,  311,  311,  318,  318,
      488,  332,  318,  489,  333,  342,  318,  387,  334,  556,
      318,  318,  343,  337,  557,  231,  624,  624,  318,  318,
      488,  332,  318,  489,  333,  342,  318,  387,  334,  556,
      318,  558,  343,  337,  557,  231,  311,  311,  311,  311,

      311,  559,  560,  311,  311,  311,  311,  311,  311,  311,
      311,  558,  311,  311,  311,  311,  311,  311,  319,  337,
      337,  559,  560,  347,  349,  337,  320,  337,  337,  348,
      350,  355,  561,  337,  231,  624,  624,  624,  319,  337,
      337,  624,  231,  347,  349,  337,  320,  337,  337,  348,
      350,  355,  561,  337,  231,  337,  311,  311,  311,  318,
      351,  337,  231,  337,  324,  562,  563,  318,  325,  337,
      564,  352,  326,  624,  624,  337,  592,  624,  624,  318,
      351,  337,  624,  337,  324,  562,  563,  318,  325,  337,
      564,  352,  326,  311,  311,  624,  592,  311,  311,  311,

      311,  311,  311,  311,  311,  593,  311,  311,  311,  311,
      311,  311,  337,  231,  231,  231,  624,  594,  353,  595,
      337,  231,  231,  231,  354,  593,  384,  386,  231,  608,
      624,  624,  337,  231,  231,  231,  231,  594,  353,  595,
      337,  231,  231,  231,  354,  392,  384,  386,  231,  608,
      311,  311,  311,  311,  311,  624,  231,  311,  311,  311,
      311,  311,  311,  311,  311,  392,  311,  311,  311,  311,
      311,  311,  338,  231,  624,  231,  231,  231,  231,  388,
      339,  231,  609,  231,  231,  231,  231,  391,  616,  390,
      624,  624,  338,  231,  389,  231,  231,  231,  231,  388,

      339,  231,  609,  231,  231,  231,  231,  391,  616,  390,
      311,  311,  311,  337,  389,  231,  231,  231,  344,  624,
      395,  337,  345,  231,  231,  231,  346,  394,  624,  393,
      624,  248,  624,  337,  624,  231,  231,  231,  344,  248,
      395,  337,  345,  231,  231,  231,  346,  394,  231,  393,
      248,  248,  398,  248,  400,  396,  231,  248,  248,  248,
      248,  248,  248,  397,  624,  401,  399,  624,  231,  624,
      248,  248,  398,  248,  400,  396,  231,  248,  248,  248,
      248,  248,  248,  397,  248,  401,  399,  248,  248,  248,
      248,  248,  248,  402,  624,  248,  248,  248,  248,  248,

      405,  624,  404,  624,  248,  403,  248,  248,  248,  248,
      248,  617,  248,  402,  248,  248,  248,  248,  248,  248,
      405,  248,  404,  406,  624,  403,  248,  248,  248,  248,
      624,  617,  624,  407,  248,  624,  248,  248,  408,  248,
      624,  248,  248,  406,  624,  248,  409,  248,  248,  248,
      248,  275,  410,  407,  624,  413,  248,  248,  408,  275,
      248,  275,  248,  275,  624,  248,  409,  411,  248,  275,
      248,  275,  410,  624,  412,  413,  415,  275,  275,  275,
      248,  275,  624,  275,  275,  275,  275,  411,  248,  275,
      414,  275,  275,  624,  412,  275,  415,  275,  275,  275,

      275,  416,  624,  275,  275,  275,  275,  624,  417,  624,
      414,  275,  275,  624,  275,  275,  275,  275,  275,  275,
      275,  416,  275,  275,  275,  275,  275,  419,  417,  624,
      418,  420,  421,  275,  275,  275,  275,  275,  275,  423,
      624,  275,  275,  275,  275,  275,  275,  419,  275,  624,
      418,  420,  421,  275,  292,  275,  275,  275,  422,  423,
      624,  275,  292,  275,  424,  275,  624,  292,  275,  624,
      624,  426,  624,  292,  292,  292,  275,  275,  422,  292,
      425,  292,  292,  624,  424,  275,  427,  292,  428,  292,
      292,  426,  624,  292,  292,  292,  292,  429,  292,  292,

      425,  292,  292,  624,  292,  292,  427,  292,  428,  292,
      292,  430,  292,  292,  292,  292,  292,  429,  292,  624,
      431,  432,  292,  624,  292,  292,  292,  292,  624,  292,
      292,  430,  292,  292,  292,  292,  433,  292,  292,  624,
      431,  432,  624,  435,  292,  292,  292,  434,  624,  292,
      292,  624,  292,  292,  292,  436,  433,  292,  292,  624,
      318,  292,  292,  435,  292,  292,  437,  434,  318,  292,
      292,  292,  292,  292,  624,  436,  438,  624,  439,  292,
      318,  292,  292,  624,  318,  441,  437,  318,  318,  292,
      292,  292,  318,  318,  443,  318,  438,  440,  439,  292,

      442,  318,  318,  318,  318,  441,  624,  318,  624,  318,
      318,  318,  318,  318,  443,  318,  444,  440,  318,  318,
      442,  318,  318,  318,  318,  624,  318,  318,  624,  318,
      318,  318,  318,  318,  318,  445,  444,  318,  318,  318,
      446,  318,  318,  447,  318,  318,  318,  318,  318,  624,
      318,  449,  318,  318,  318,  445,  318,  318,  450,  448,
      446,  318,  318,  447,  337,  318,  624,  318,  318,  318,
      318,  449,  337,  451,  452,  318,  318,  318,  450,  448,
      454,  624,  456,  337,  337,  624,  624,  318,  337,  318,
      337,  337,  337,  451,  452,  318,  453,  318,  337,  337,

      454,  337,  456,  337,  624,  337,  457,  337,  337,  337,
      337,  337,  455,  337,  337,  337,  453,  624,  337,  337,
      458,  337,  337,  337,  624,  337,  457,  337,  337,  337,
      337,  459,  455,  337,  337,  337,  337,  337,  337,  624,
      458,  337,  337,  337,  460,  337,  337,  461,  337,  337,
      337,  459,  337,  624,  337,  463,  337,  337,  337,  624,
      337,  337,  464,  462,  460,  337,  337,  461,  624,  337,
      337,  624,  337,  337,  337,  463,  624,  465,  337,  337,
      337,  337,  464,  462,  231,  466,  467,  337,  490,  624,
      337,  624,  231,  337,  624,  624,  624,  465,  337,  337,

      624,  337,  231,  624,  231,  466,  467,  337,  490,  231,
      231,  624,  231,  492,  624,  491,  231,  231,  493,  231,
      624,  624,  231,  494,  231,  624,  231,  231,  624,  231,
      231,  624,  231,  492,  231,  491,  231,  231,  493,  231,
      231,  231,  495,  494,  231,  231,  231,  231,  624,  231,
      231,  231,  231,  231,  231,  231,  496,  624,  231,  497,
      231,  231,  495,  231,  498,  231,  231,  624,  624,  231,
      231,  231,  624,  231,  499,  231,  496,  248,  231,  497,
      248,  500,  624,  231,  498,  248,  231,  248,  248,  624,
      248,  502,  503,  501,  499,  248,  248,  248,  248,  624,

      248,  500,  624,  624,  248,  248,  248,  248,  248,  504,
      248,  502,  503,  501,  248,  248,  248,  248,  248,  624,
      248,  505,  624,  248,  248,  248,  248,  248,  248,  504,
      506,  248,  624,  624,  248,  248,  248,  248,  507,  624,
      248,  505,  624,  248,  248,  248,  248,  248,  248,  248,
      506,  248,  248,  510,  508,  248,  248,  248,  507,  248,
      248,  509,  624,  275,  248,  624,  248,  511,  624,  248,
      624,  275,  248,  510,  508,  624,  513,  248,  275,  248,
      248,  509,  512,  275,  275,  624,  275,  511,  514,  275,
      624,  275,  275,  275,  624,  515,  513,  275,  275,  275,

      624,  275,  512,  516,  275,  624,  275,  275,  514,  275,
      275,  624,  275,  275,  275,  515,  275,  275,  275,  275,
      517,  275,  275,  516,  275,  518,  624,  275,  624,  275,
      275,  275,  624,  275,  275,  624,  275,  275,  275,  519,
      517,  521,  275,  624,  275,  518,  275,  624,  292,  275,
      292,  275,  522,  275,  275,  520,  292,  275,  292,  519,
      624,  521,  624,  523,  624,  292,  275,  624,  292,  524,
      292,  624,  522,  292,  275,  520,  292,  624,  292,  292,
      292,  525,  292,  523,  527,  292,  292,  292,  292,  524,
      292,  624,  624,  292,  292,  526,  528,  292,  624,  292,

      292,  525,  292,  624,  527,  292,  292,  292,  292,  624,
      292,  292,  292,  292,  292,  526,  528,  292,  292,  292,
      292,  292,  529,  624,  624,  292,  530,  292,  624,  292,
      624,  292,  292,  292,  624,  292,  531,  533,  292,  292,
      292,  292,  529,  624,  292,  624,  530,  292,  532,  292,
      318,  624,  292,  318,  534,  292,  531,  533,  318,  318,
      624,  318,  624,  536,  292,  624,  535,  318,  532,  318,
      318,  537,  292,  318,  534,  624,  318,  318,  318,  318,
      538,  318,  318,  536,  318,  318,  535,  318,  624,  318,
      318,  537,  539,  318,  624,  318,  318,  318,  624,  318,

      538,  318,  318,  318,  318,  318,  540,  318,  318,  318,
      318,  624,  539,  318,  624,  318,  541,  318,  624,  318,
      624,  318,  318,  318,  624,  543,  540,  318,  318,  318,
      318,  542,  624,  337,  624,  337,  541,  318,  624,  544,
      337,  337,  318,  337,  546,  543,  545,  624,  337,  624,
      318,  542,  624,  337,  337,  337,  547,  337,  624,  544,
      337,  337,  337,  337,  546,  337,  545,  337,  337,  624,
      548,  549,  337,  337,  337,  337,  547,  337,  337,  624,
      337,  337,  337,  550,  624,  337,  337,  337,  337,  551,
      548,  549,  337,  337,  337,  337,  337,  337,  337,  624,

      337,  337,  337,  550,  337,  552,  337,  337,  337,  551,
      337,  554,  337,  553,  337,  337,  337,  337,  555,  624,
      231,  231,  337,  624,  337,  552,  624,  337,  231,  231,
      337,  554,  337,  553,  565,  337,  231,  231,  555,  231,
      231,  231,  231,  624,  231,  231,  624,  231,  231,  231,
      231,  566,  624,  231,  565,  231,  231,  231,  231,  231,
      567,  231,  231,  231,  231,  231,  231,  231,  231,  248,
      231,  566,  568,  231,  248,  231,  231,  248,  231,  624,
      567,  231,  248,  231,  624,  248,  231,  569,  231,  248,
      248,  248,  568,  248,  248,  570,  231,  248,  248,  248,

      248,  624,  248,  624,  624,  248,  248,  569,  248,  248,
      248,  248,  571,  248,  248,  570,  572,  248,  248,  248,
      248,  624,  248,  248,  624,  248,  248,  275,  248,  248,
      248,  248,  571,  248,  248,  275,  572,  248,  275,  624,
      248,  275,  248,  248,  573,  248,  275,  275,  248,  275,
      248,  248,  624,  248,  574,  275,  624,  275,  275,  275,
      248,  275,  275,  624,  573,  275,  275,  275,  248,  275,
      275,  575,  624,  275,  574,  275,  275,  275,  624,  275,
      576,  275,  275,  275,  275,  275,  624,  275,  624,  292,
      275,  575,  624,  275,  275,  275,  275,  292,  577,  292,

      576,  275,  275,  275,  275,  292,  624,  292,  292,  292,
      624,  624,  578,  292,  275,  624,  292,  292,  577,  292,
      624,  292,  275,  292,  624,  292,  292,  292,  292,  292,
      579,  292,  578,  292,  292,  580,  292,  292,  624,  292,
      292,  292,  624,  292,  581,  292,  292,  292,  292,  292,
      579,  292,  624,  292,  292,  580,  624,  292,  292,  292,
      292,  292,  582,  318,  581,  292,  292,  292,  292,  318,
      624,  318,  318,  292,  624,  624,  318,  318,  292,  624,
      318,  292,  582,  318,  318,  583,  292,  318,  624,  318,
      318,  318,  318,  624,  318,  318,  318,  318,  318,  584,

      318,  585,  318,  318,  318,  583,  624,  318,  318,  318,
      318,  318,  337,  586,  318,  318,  318,  318,  318,  584,
      337,  585,  318,  318,  624,  624,  337,  337,  318,  318,
      337,  318,  337,  586,  337,  337,  318,  318,  337,  587,
      337,  337,  624,  337,  337,  588,  337,  337,  624,  337,
      337,  337,  337,  624,  337,  337,  589,  624,  337,  587,
      337,  337,  337,  337,  337,  588,  337,  590,  337,  337,
      337,  337,  337,  337,  337,  337,  589,  231,  624,  591,
      337,  337,  337,  337,  231,  231,  337,  590,  337,  624,
      337,  596,  231,  337,  337,  337,  624,  231,  624,  591,

      231,  337,  248,  337,  231,  231,  231,  248,  231,  597,
      248,  596,  231,  248,  231,  248,  248,  624,  624,  624,
      231,  248,  248,  598,  248,  624,  231,  248,  231,  597,
      248,  275,  624,  248,  231,  248,  248,  248,  275,  275,
      599,  248,  275,  598,  248,  248,  275,  292,  624,  600,
      275,  275,  624,  275,  624,  292,  601,  248,  275,  275,
      599,  275,  275,  292,  624,  248,  275,  292,  624,  600,
      275,  292,  292,  275,  292,  292,  601,  603,  292,  602,
      292,  275,  292,  292,  624,  318,  292,  624,  318,  624,
      624,  292,  292,  318,  292,  604,  318,  603,  292,  602,

      292,  318,  292,  318,  605,  318,  292,  624,  318,  318,
      337,  318,  337,  318,  337,  604,  318,  607,  337,  337,
      337,  318,  337,  318,  605,  337,  606,  337,  231,  318,
      337,  318,  337,  337,  337,  231,  231,  607,  337,  337,
      337,  624,  337,  231,  248,  337,  606,  337,  231,  610,
      624,  248,  248,  337,  275,  231,  231,  275,  611,  248,
      624,  624,  275,  231,  248,  275,  624,  292,  612,  610,
      624,  248,  248,  624,  275,  292,  292,  275,  611,  248,
      624,  613,  275,  318,  292,  275,  318,  292,  612,  624,
      337,  318,  231,  624,  318,  292,  292,  614,  337,  337,

      231,  613,  624,  318,  292,  618,  318,  337,  248,  624,
      337,  318,  231,  615,  318,  624,  248,  614,  337,  337,
      231,  619,  275,  231,  292,  618,  318,  337,  248,  624,
      275,  231,  292,  615,  318,  620,  248,  621,  624,  622,
      337,  619,  275,  231,  292,  624,  318,  624,  337,  624,
      275,  231,  292,  623,  318,  620,  248,  621,  275,  622,
      337,  292,  318,  337,  248,  624,  275,  624,  337,  292,
      318,  337,  624,  623,  624,  624,  248,  624,  275,  624,
      624,  292,  318,  337,  248,  624,  275,  624,  624,  292,
      318,  337,  224,  624,  224,  624,  224,  231,  624,  231,

      624,  231,  248,  624,  248,  624,  248,  267,  624,  267,
      267,  267,  275,  624,  275,  275,  275,  292,  624,  292,
      292,  292,  311,  624,  624,  311,  311,  318,  624,  624,
      318,  318,  335,  335,  335,  335,  335,  337,  624,  624,
      337,  337,    9,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624
    } ;

static const flex_int16_t yy_chk[3104] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,

        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
       25,   29,   31,   30,   35,   33,   32,   25,   30,   29,
       32,   33,   34,   36,   32,   37,   38,  626,   34,   40,
      625,   29,   31,   30,   35,   33,   32,   40,   30,   29,
       32,   33,   34,   36,   32,   37,   38,   41,   34,   40,
       44,   42,   41,   46,   45,   43,   44,   40,   42,   43,
       45,   47,   48,   43,   49,  314,  189,   41,   48,  190,

       44,   42,   41,   46,   45,   43,   44,  312,   42,   43,
       45,   47,   48,   43,   49,   66,  189,  271,   48,  190,
      108,  268,   66,   69,   69,  227,   69,  108,   69,  225,
       69,   69,   69,   69,   69,   71,   69,   69,   69,   69,
       69,   69,   72,   71,  191,  151,   76,  184,   71,   72,
       72,   76,  151,  192,   76,   71,  195,   77,  196,  197,
       69,  180,   72,   71,  191,   77,   76,   77,   71,   72,
       72,   76,  165,  192,   76,  198,  195,   77,  196,  197,
       69,   69,   69,   70,   70,   77,   70,   77,   70,  152,
       70,   70,   70,   70,   70,  198,   70,   70,   70,   70,

       70,   70,   70,   74,   75,  199,  200,   74,   75,   78,
       70,   74,   75,   74,   75,   78,  202,   78,  148,  203,
       70,  142,   70,   74,   75,  199,  200,   74,   75,   78,
       70,   74,   75,   74,   75,   78,  202,   78,   79,  203,
       70,   70,   70,   73,   79,   87,   79,   83,   73,  204,
       87,   73,   73,   87,   83,   83,   73,  137,   79,  206,
      109,  207,  105,   73,   79,   87,   79,   83,   73,  204,
       87,   73,   73,   87,   83,   83,   73,   80,   80,  206,
       80,  207,   80,   99,   80,   80,   80,   80,   80,   82,
       80,   80,   80,   80,   80,   80,   85,   82,  208,  209,

       85,  210,   82,   86,   85,  213,   85,   86,  214,   82,
      215,   86,  216,   86,   80,   97,   85,   82,  208,  209,
       85,  210,   82,   86,   85,  213,   85,   86,  214,   95,
      215,   86,  216,   86,   80,   80,   80,   81,   81,   67,
       81,  217,   81,  218,   81,   81,   81,   81,   81,   88,
       81,   81,   81,   81,   81,   81,   81,   88,   63,   88,
       89,  217,  220,  218,   81,   90,   89,  221,   89,   88,
      113,   90,   89,   90,   81,   57,   81,   88,  113,   88,
       89,  222,  220,  113,   81,   90,   89,  221,   89,  223,
      113,   90,   89,   90,   81,   81,   81,   84,  113,  356,

      114,  222,   84,  113,  357,   84,   84,  114,  114,  223,
       84,   55,   54,  358,   26,   22,   19,   84,   16,  356,
      114,   14,   84,  359,  357,   84,   84,  114,  114,   11,
       84,  111,  111,  358,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  359,  111,  111,  111,  111,  111,  111,
      116,  117,  360,  361,  116,  117,  119,  118,  116,  117,
      116,  117,  118,  363,  119,  118,  119,  366,  111,    9,
      116,  117,  360,  361,  116,  117,  119,  118,  116,  117,
      116,  117,  118,  363,  119,  118,  119,  366,  111,  111,
      111,  112,  112,    0,  112,  112,  112,  112,  112,  112,

      112,  112,  112,    0,  112,  112,  112,  112,  112,  112,
      112,  120,    0,  124,  121,    0,  125,  120,  112,  120,
      121,  124,  121,  125,  125,  367,  124,  129,  112,    0,
      112,  120,  129,  124,  121,  129,  125,  120,  112,  120,
      121,  124,  121,  125,  125,  367,  124,  129,  112,  112,
      112,  115,  129,  127,  156,  129,  115,  127,  368,  115,
      115,  127,  156,  127,  115,    0,    0,  156,    0,    0,
        0,  115,    0,  127,  156,    0,  115,  127,  368,  115,
      115,  127,  156,  127,  115,  122,  122,  156,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  130,  122,  122,

      122,  122,  122,  122,  128,  130,  369,  130,  128,  370,
      132,  231,  128,  157,  128,  371,  132,  130,  132,  231,
      157,  157,  122,    0,  128,  130,  369,  130,  128,  370,
      132,  231,  128,  157,  128,  371,  132,  372,  132,  231,
      157,  157,  122,  122,  122,  123,  123,    0,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  372,  123,  123,
      123,  123,  123,  123,  123,  131,  159,  168,  373,  374,
      159,  131,  123,  131,  159,  168,  159,  131,  375,  377,
      168,    0,  123,    0,  123,  131,  159,  168,  373,  374,
      159,  131,  123,  131,  159,  168,  159,  131,  375,  377,

      168,  161,  123,  123,  123,  126,  161,  160,  233,  161,
      126,  160,  380,  126,  126,  160,  233,  160,  126,    0,
        0,  161,  381,    0,    0,  126,  161,  160,  233,  161,
      126,  160,  380,  126,  126,  160,  233,  160,  126,  154,
      154,    0,  381,  154,  154,  154,  154,  154,  154,  154,
      154,  162,  154,  154,  154,  154,  154,  154,  163,  162,
      382,  162,  164,  383,  163,  169,  163,  235,  164,  469,
      164,  162,  169,  169,  472,  235,    0,    0,  163,  162,
      382,  162,  164,  383,  163,  169,  163,  235,  164,  469,
      164,  473,  169,  169,  472,  235,  154,  154,  154,  155,

      155,  477,  479,  155,  155,  155,  155,  155,  155,  155,
      155,  473,  155,  155,  155,  155,  155,  155,  155,  171,
      172,  477,  479,  171,  172,  176,  155,  171,  172,  171,
      172,  176,  482,  176,  236,    0,    0,    0,  155,  171,
      172,    0,  236,  171,  172,  176,  155,  171,  172,  171,
      172,  176,  482,  176,  236,  173,  155,  155,  155,  158,
      173,  174,  236,  173,  158,  483,  484,  158,  158,  174,
      489,  174,  158,    0,    0,  173,  557,    0,    0,  158,
      173,  174,    0,  173,  158,  483,  484,  158,  158,  174,
      489,  174,  158,  166,  166,    0,  557,  166,  166,  166,

      166,  166,  166,  166,  166,  558,  166,  166,  166,  166,
      166,  166,  175,  232,  234,  237,    0,  562,  175,  563,
      175,  232,  234,  237,  175,  558,  232,  234,  242,  592,
        0,    0,  175,  232,  234,  237,  242,  562,  175,  563,
      175,  232,  234,  237,  175,  242,  232,  234,  242,  592,
      166,  166,  166,  167,  167,    0,  242,  167,  167,  167,
      167,  167,  167,  167,  167,  242,  167,  167,  167,  167,
      167,  167,  167,  238,    0,  240,  244,  241,  239,  238,
      167,  238,  594,  240,  244,  241,  239,  241,  608,  240,
        0,    0,  167,  238,  239,  240,  244,  241,  239,  238,

      167,  238,  594,  240,  244,  241,  239,  241,  608,  240,
      167,  167,  167,  170,  239,  243,  246,  245,  170,    0,
      246,  170,  170,  243,  246,  245,  170,  245,    0,  243,
        0,  248,    0,  170,    0,  243,  246,  245,  170,  248,
      246,  170,  170,  243,  246,  245,  170,  245,  247,  243,
      249,  248,  250,  251,  252,  247,  247,  253,  249,  248,
      250,  251,  252,  249,    0,  253,  251,    0,  247,    0,
      249,  254,  250,  251,  252,  247,  247,  253,  249,  254,
      250,  251,  252,  249,  255,  253,  251,  256,  258,  257,
      259,  254,  255,  256,    0,  256,  258,  257,  259,  254,

      259,    0,  258,    0,  255,  257,  260,  256,  258,  257,
      259,  609,  255,  256,  260,  256,  258,  257,  259,  261,
      259,  262,  258,  260,    0,  257,  260,  261,  263,  262,
        0,  609,    0,  261,  260,    0,  263,  265,  263,  261,
        0,  262,  264,  260,    0,  265,  264,  261,  263,  262,
      264,  275,  265,  261,    0,  277,  263,  265,  263,  275,
      266,  276,  264,  277,    0,  265,  264,  266,  266,  276,
      264,  275,  265,    0,  276,  277,  279,  278,  280,  275,
      266,  276,    0,  277,  279,  278,  280,  266,  266,  276,
      278,  281,  283,    0,  276,  282,  279,  278,  280,  281,

      283,  282,    0,  282,  279,  278,  280,    0,  283,    0,
      278,  281,  283,    0,  286,  282,  284,  285,  287,  281,
      283,  282,  286,  282,  284,  285,  287,  285,  283,    0,
      284,  286,  287,  288,  286,  290,  284,  285,  287,  290,
        0,  288,  286,  290,  284,  285,  287,  285,  289,    0,
      284,  286,  287,  288,  292,  290,  289,  291,  289,  290,
        0,  288,  292,  290,  291,  291,    0,  293,  289,    0,
        0,  294,    0,  295,  292,  293,  289,  291,  289,  294,
      293,  295,  292,    0,  291,  291,  295,  293,  296,  297,
      298,  294,    0,  295,  299,  293,  296,  297,  298,  294,

      293,  295,  299,    0,  301,  300,  295,  302,  296,  297,
      298,  300,  301,  300,  299,  302,  296,  297,  298,    0,
      301,  302,  299,    0,  301,  300,  303,  302,    0,  305,
      304,  300,  301,  300,  303,  302,  303,  305,  304,    0,
      301,  302,    0,  305,  306,  307,  303,  304,    0,  305,
      304,    0,  306,  307,  303,  307,  303,  305,  304,    0,
      318,  309,  308,  305,  306,  307,  308,  304,  318,  309,
      308,  310,  306,  307,    0,  307,  309,    0,  310,  310,
      318,  309,  308,    0,  319,  320,  308,  321,  318,  309,
      308,  310,  319,  320,  322,  321,  309,  319,  310,  310,

      321,  323,  322,  324,  319,  320,    0,  321,    0,  323,
      325,  324,  319,  320,  322,  321,  325,  319,  325,  326,
      321,  323,  322,  324,  331,    0,  327,  326,    0,  323,
      325,  324,  331,  328,  327,  326,  325,  330,  325,  326,
      327,  328,  329,  328,  331,  330,  327,  326,  332,    0,
      329,  330,  331,  328,  327,  326,  332,  330,  332,  329,
      327,  328,  329,  328,  337,  330,    0,  334,  332,  333,
      329,  330,  337,  333,  334,  334,  332,  333,  332,  329,
      339,    0,  341,  338,  337,    0,    0,  334,  339,  333,
      341,  338,  337,  333,  334,  334,  338,  333,  342,  340,

      339,  343,  341,  338,    0,  344,  342,  340,  339,  343,
      341,  338,  340,  344,  345,  346,  338,    0,  342,  340,
      345,  343,  345,  346,    0,  344,  342,  340,  351,  343,
      347,  346,  340,  344,  345,  346,  351,  348,  347,    0,
      345,  350,  345,  346,  347,  348,  349,  348,  351,  350,
      347,  346,  352,    0,  349,  350,  351,  348,  347,    0,
      352,  350,  352,  349,  347,  348,  349,  348,    0,  350,
      354,    0,  352,  353,  349,  350,    0,  353,  354,  355,
      352,  353,  352,  349,  384,  354,  355,  355,  384,    0,
      354,    0,  384,  353,    0,    0,    0,  353,  354,  355,

        0,  353,  385,    0,  384,  354,  355,  355,  384,  386,
      385,    0,  384,  386,    0,  385,  387,  386,  387,  388,
        0,    0,  385,  388,  387,    0,  390,  388,    0,  386,
      385,    0,  389,  386,  390,  385,  387,  386,  387,  388,
      389,  392,  389,  388,  387,  391,  390,  388,    0,  392,
      393,  394,  389,  391,  390,  395,  391,    0,  393,  394,
      389,  392,  389,  395,  395,  391,  396,    0,    0,  392,
      393,  394,    0,  391,  396,  395,  391,  397,  393,  394,
      398,  397,    0,  395,  395,  397,  396,  399,  398,    0,
      400,  399,  400,  398,  396,  399,  401,  397,  400,    0,

      398,  397,    0,    0,  401,  397,  404,  399,  398,  401,
      400,  399,  400,  398,  404,  399,  401,  402,  400,    0,
      403,  402,    0,  406,  401,  402,  404,  405,  403,  401,
      403,  406,    0,    0,  404,  405,  407,  402,  405,    0,
      403,  402,    0,  406,  407,  402,  408,  405,  403,  410,
      403,  406,  409,  410,  408,  405,  407,  410,  405,  411,
      409,  409,    0,  413,  407,    0,  408,  411,    0,  410,
        0,  413,  409,  410,  408,    0,  413,  410,  412,  411,
      409,  409,  412,  413,  414,    0,  412,  411,  414,  418,
        0,  413,  414,  415,    0,  415,  413,  418,  412,  416,

        0,  415,  412,  416,  414,    0,  412,  416,  414,  418,
      417,    0,  414,  415,  419,  415,  420,  418,  417,  416,
      417,  415,  419,  416,  420,  419,    0,  416,    0,  421,
      417,  422,    0,  424,  419,    0,  420,  421,  417,  422,
      417,  424,  419,    0,  420,  419,  423,    0,  425,  421,
      426,  422,  425,  424,  423,  423,  425,  421,  426,  422,
        0,  424,    0,  426,    0,  427,  423,    0,  425,  427,
      426,    0,  425,  427,  423,  423,  425,    0,  426,  428,
      430,  428,  429,  426,  430,  427,  431,  428,  430,  427,
      429,    0,    0,  427,  431,  429,  431,  432,    0,  428,

      430,  428,  429,    0,  430,  432,  431,  428,  430,    0,
      429,  433,  434,  435,  431,  429,  431,  432,  436,  433,
      434,  435,  433,    0,    0,  432,  436,  437,    0,  439,
        0,  433,  434,  435,    0,  437,  437,  439,  436,  433,
      434,  435,  433,    0,  438,    0,  436,  437,  438,  439,
      440,    0,  438,  441,  440,  437,  437,  439,  440,  442,
        0,  441,    0,  442,  438,    0,  441,  442,  438,  443,
      440,  443,  438,  441,  440,    0,  444,  443,  440,  442,
      444,  441,  445,  442,  444,  446,  441,  442,    0,  443,
      445,  443,  445,  446,    0,  447,  444,  443,    0,  448,

      444,  449,  445,  447,  444,  446,  447,  448,  450,  449,
      445,    0,  445,  446,    0,  447,  450,  452,    0,  448,
        0,  449,  451,  447,    0,  452,  447,  448,  450,  449,
      451,  451,    0,  454,    0,  453,  450,  452,    0,  453,
      455,  454,  451,  453,  455,  452,  454,    0,  455,    0,
      451,  451,    0,  454,  456,  453,  456,  457,    0,  453,
      455,  454,  456,  453,  455,  457,  454,  458,  455,    0,
      457,  458,  460,  459,  456,  458,  456,  457,  461,    0,
      460,  459,  456,  459,    0,  457,  461,  458,  462,  461,
      457,  458,  460,  459,  463,  458,  462,  464,  461,    0,

      460,  459,  463,  459,  465,  464,  461,  466,  462,  461,
      467,  466,  465,  465,  463,  466,  462,  464,  467,    0,
      490,  491,  463,    0,  465,  464,    0,  466,  490,  491,
      467,  466,  465,  465,  491,  466,  492,  493,  467,  494,
      490,  491,  496,    0,  492,  493,    0,  494,  490,  491,
      496,  494,    0,  495,  491,  497,  492,  493,  498,  494,
      495,  495,  496,  497,  492,  493,  498,  494,  499,  500,
      496,  494,  499,  495,  501,  497,  499,  500,  498,    0,
      495,  495,  501,  497,    0,  502,  498,  501,  499,  500,
      503,  504,  499,  502,  501,  504,  499,  500,  503,  504,

      505,    0,  501,    0,    0,  502,  507,  501,  505,  506,
      503,  504,  505,  502,  507,  504,  506,  506,  503,  504,
      505,    0,  508,  509,    0,  510,  507,  512,  505,  506,
      508,  509,  505,  510,  507,  512,  506,  506,  514,    0,
      511,  513,  508,  509,  511,  510,  514,  512,  511,  513,
      508,  509,    0,  510,  513,  512,    0,  515,  514,  516,
      511,  513,  518,    0,  511,  515,  514,  516,  511,  513,
      518,  516,    0,  517,  513,  519,  520,  515,    0,  516,
      517,  517,  518,  519,  520,  515,    0,  516,    0,  522,
      518,  516,    0,  517,  521,  519,  520,  522,  521,  523,

      517,  517,  521,  519,  520,  524,    0,  523,  525,  522,
        0,    0,  523,  524,  521,    0,  525,  522,  521,  523,
        0,  529,  521,  527,    0,  524,  526,  523,  525,  529,
      526,  527,  523,  524,  526,  527,  525,  528,    0,  530,
      531,  529,    0,  527,  528,  528,  526,  530,  531,  529,
      526,  527,    0,  532,  526,  527,    0,  528,  533,  530,
      531,  532,  533,  534,  528,  528,  533,  530,  531,  536,
        0,  534,  535,  532,    0,    0,  537,  536,  533,    0,
      535,  532,  533,  534,  537,  535,  533,  538,    0,  536,
      540,  534,  535,    0,  539,  538,  537,  536,  540,  538,

      535,  539,  539,  541,  537,  535,    0,  538,  542,  543,
      540,  541,  544,  543,  539,  538,  542,  543,  540,  538,
      544,  539,  539,  541,    0,    0,  545,  546,  542,  543,
      547,  541,  544,  543,  545,  546,  542,  543,  547,  545,
      544,  548,    0,  551,  549,  548,  545,  546,    0,  548,
      547,  551,  549,    0,  545,  546,  549,    0,  547,  545,
      550,  548,  552,  551,  549,  548,  553,  550,  550,  548,
      552,  551,  549,  554,  553,  555,  549,  565,    0,  555,
      550,  554,  552,  555,  566,  565,  553,  550,  550,    0,
      552,  566,  566,  554,  553,  555,    0,  565,    0,  555,

      568,  554,  569,  555,  566,  565,  567,  570,  568,  567,
      569,  566,  566,  573,  567,  570,  571,    0,    0,    0,
      568,  573,  569,  571,  571,    0,  567,  570,  568,  567,
      569,  574,    0,  573,  567,  570,  571,  572,  577,  574,
      572,  573,  575,  571,  571,  572,  577,  578,    0,  575,
      575,  574,    0,  576,    0,  578,  576,  572,  577,  574,
      572,  576,  575,  579,    0,  572,  577,  578,    0,  575,
      575,  579,  580,  576,  581,  578,  576,  581,  582,  580,
      580,  576,  581,  579,    0,  583,  582,    0,  584,    0,
        0,  579,  580,  583,  581,  584,  584,  581,  582,  580,

      580,  585,  581,  586,  585,  583,  582,    0,  584,  585,
      587,  586,  588,  583,  590,  584,  584,  590,  587,  589,
      588,  585,  590,  586,  585,  591,  589,  589,  597,  585,
      587,  586,  588,  591,  590,  596,  597,  590,  587,  589,
      588,    0,  590,  596,  598,  591,  589,  589,  597,  596,
        0,  599,  598,  591,  600,  596,  597,  601,  598,  599,
        0,    0,  600,  596,  598,  601,    0,  602,  600,  596,
        0,  599,  598,    0,  600,  602,  603,  601,  598,  599,
        0,  602,  600,  604,  603,  601,  605,  602,  600,    0,
      607,  604,  610,    0,  605,  602,  603,  604,  607,  606,

      610,  602,    0,  604,  603,  610,  605,  606,  611,    0,
      607,  604,  610,  606,  605,    0,  611,  604,  607,  606,
      610,  611,  612,  618,  613,  610,  614,  606,  611,    0,
      612,  618,  613,  606,  614,  612,  611,  613,    0,  614,
      615,  611,  612,  618,  613,    0,  614,    0,  615,    0,
      612,  618,  613,  615,  614,  612,  619,  613,  620,  614,
      615,  621,  622,  623,  619,    0,  620,    0,  615,  621,
      622,  623,    0,  615,    0,    0,  619,    0,  620,    0,
        0,  621,  622,  623,  619,    0,  620,    0,    0,  621,
      622,  623,  627,    0,  627,    0,  627,  628,    0,  628,

        0,  628,  629,    0,  629,    0,  629,  630,    0,  630,
      630,  630,  631,    0,  631,  631,  631,  632,    0,  632,
      632,  632,  633,    0,    0,  633,  633,  634,    0,    0,
      634,  634,  635,  635,  635,  635,  635,  636,    0,    0,
      636,  636,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,
      624,  624,  624,  624,  624,  624,  624,  624,  624,  624,

      624,  624,  624
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[60] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
        };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[59] =
    {   0,
       59,   64,   66,   68,   81,   90,   93,   96,  107,  113,
      116,  119,  133,  141,  202,  205,  208,  211,  214,  217,
      220,  223,  226,  229,  232,  235,  238,  241,  244,  247,
      250,  254,  260,  265,  271,  274,  281,  286,  297,  300,
      303,  305,  307,  309,  311,  313,  315,  317,  319,  321,
      323,  325,  327,  329,  331,  333,  335,  342
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "./cool.flex"
/*
 *  The scanner definition for COOL.
 */
#line 6 "./cool.flex"
#include <string>
#include "stringtab.h"
#include "utilities.h"
#include "cool-parse.h"

/* Max size of string constants */
#define MAX_STR_CONST 1025
#define YY_NO_UNPUT   /* keep g++ happy */

extern FILE *token_file; /* we read from this file */

/* define YY_INPUT so we read from the FILE fin:
 * This change makes it possible to use this scanner in
 * the Cool compiler.
 */
#undef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
    if ( (result = fread( (char*)buf, sizeof(char), max_size, token_file)) < 0) \
        YY_FATAL_ERROR( "read() in flex scanner failed");

char string_buf[MAX_STR_CONST]; /* to assemble string constants */
char *string_buf_ptr;

extern int verbose_flag;
extern int curr_lineno;
extern char* curr_filename;

/* The compiler assumes these identifiers. */
#define yylval cool_yylval
#define yylex  cool_yylex

static int comment_layer = 0;

extern int curr_lineno;
extern int verbose_flag;

extern YYSTYPE cool_yylval;

#line 1499 "cool-flex-lexer.cc"

#line 1501 "cool-flex-lexer.cc"

#define INITIAL 0
#define COMMENTS 1
#define INLINE_COMMENTS 2
#define STRING 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 55 "./cool.flex"


#line 58 "./cool.flex"
 /* Nested comments */
#line 1789 "cool-flex-lexer.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (int) ((yy_c_buf_p) - (yytext_ptr));
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 625 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3043 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = (yy_more_len); yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 59 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 59 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 60 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "./cool.flex"
{
    comment_layer++;
    BEGIN COMMENTS;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 64 "./cool.flex"
{ }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "./cool.flex"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "./cool.flex"
{
    comment_layer--;
    if (comment_layer == 0) {
        BEGIN 0;
    }
}
	YY_BREAK
case YY_STATE_EOF(COMMENTS):
#line 75 "./cool.flex"
{
    yylval.error_msg = "EOF in comment";
    BEGIN 0;
    return ERROR;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 81 "./cool.flex"
{
    yylval.error_msg = "Unmatched *)";
    return ERROR;
}
	YY_BREAK
/* Singleline comments */
/* "--", start inline comment */
case 6:
YY_RULE_SETUP
#line 90 "./cool.flex"
{ BEGIN INLINE_COMMENTS; }
	YY_BREAK
/* any character other than '\n' is a nop in inline comments */ 
case 7:
YY_RULE_SETUP
#line 93 "./cool.flex"
{ }
	YY_BREAK
/* if seen '\n' in inline comment, the comment ends */
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 96 "./cool.flex"
{
    curr_lineno++;
    BEGIN 0;
}
	YY_BREAK
/* String constants (C syntax)
   * Escape sequence \c is accepted for all characters c. Except for 
   * \n \t \b \f, the result is c.
   */
/* if seen '\"', start string */
case 9:
YY_RULE_SETUP
#line 107 "./cool.flex"
{
    BEGIN STRING;
    yymore();
}
	YY_BREAK
/* Cannot read '\\' '\"' '\n' */
case 10:
YY_RULE_SETUP
#line 113 "./cool.flex"
{ yymore(); }
	YY_BREAK
/* normal escape characters, not \n */
case 11:
YY_RULE_SETUP
#line 116 "./cool.flex"
{ yymore(); }
	YY_BREAK
/* seen a '\\' at the end of a line, the string continues */
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 119 "./cool.flex"
{
    curr_lineno++;
    yymore();
}
	YY_BREAK
/* meet EOF in the middle of a string, error */
case YY_STATE_EOF(STRING):
#line 125 "./cool.flex"
{
    yylval.error_msg = "EOF in string constant";
    BEGIN 0;
    yyrestart(yyin);
    return ERROR;
}
	YY_BREAK
/* meet a '\n' in the middle of a string without a '\\', error */
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 133 "./cool.flex"
{
    yylval.error_msg = "Unterminated string constant";
    BEGIN 0;
    curr_lineno++;
    return ERROR;
}
	YY_BREAK
/* string ends, we need to deal with some escape characters */
case 14:
YY_RULE_SETUP
#line 141 "./cool.flex"
{
    std::string input(yytext, yyleng);

    // remove the '\"'s on both sizes.
    input = input.substr(1, input.length() - 2);

    std::string output = "";
    std::string::size_type pos;

    if (input.find_first_of('\0') != std::string::npos) {
        yylval.error_msg = "String contains 0 character";
        BEGIN 0;
        return ERROR;
    }

    while ((pos = input.find_first_of("\\")) != std::string::npos) {
        output += input.substr(0, pos);

        switch (input[pos + 1]) {
        case 'b':
            output += "\b";
            break;
        case 't':
            output += "\t";
            break;
        case 'n':
            output += "\n";
            break;
        case 'f':
            output += "\f";
            break;
        default:
            output += input[pos + 1];
            break;
        }

        input = input.substr(pos + 2, input.length() - 2);
    }

    output += input;

    if (output.length() > 1024) {
        yylval.error_msg = "String constant too long";
        BEGIN 0;
        return ERROR;
    }

    /* Lexer + Symbol Table task 1 */
    cool_yylval.symbol = stringtable.add_string(yytext); 

    BEGIN 0;
    return STR_CONST;

}
	YY_BREAK
/* ========
  * keywords
  * ========
  */
/* CLASS */
case 15:
YY_RULE_SETUP
#line 202 "./cool.flex"
{ return CLASS; }
	YY_BREAK
/* ELSE */
case 16:
YY_RULE_SETUP
#line 205 "./cool.flex"
{ return ELSE; }
	YY_BREAK
/* FI */
case 17:
YY_RULE_SETUP
#line 208 "./cool.flex"
{ return FI; }
	YY_BREAK
/* IF */
case 18:
YY_RULE_SETUP
#line 211 "./cool.flex"
{ return IF; }
	YY_BREAK
/* IN*/
case 19:
YY_RULE_SETUP
#line 214 "./cool.flex"
{ return IN; }
	YY_BREAK
/* INHERITS */
case 20:
YY_RULE_SETUP
#line 217 "./cool.flex"
{ return INHERITS; }
	YY_BREAK
/* LET */
case 21:
YY_RULE_SETUP
#line 220 "./cool.flex"
{ return LET; }
	YY_BREAK
/* LOOP */
case 22:
YY_RULE_SETUP
#line 223 "./cool.flex"
{ return LOOP; }
	YY_BREAK
/* POOL */
case 23:
YY_RULE_SETUP
#line 226 "./cool.flex"
{ return POOL; }
	YY_BREAK
/* THEN */
case 24:
YY_RULE_SETUP
#line 229 "./cool.flex"
{ return THEN; }
	YY_BREAK
/* WHILE */
case 25:
YY_RULE_SETUP
#line 232 "./cool.flex"
{ return WHILE; }
	YY_BREAK
/* CASE */
case 26:
YY_RULE_SETUP
#line 235 "./cool.flex"
{ return CASE; }
	YY_BREAK
/* ESAC */
case 27:
YY_RULE_SETUP
#line 238 "./cool.flex"
{ return ESAC; }
	YY_BREAK
/* OF */
case 28:
YY_RULE_SETUP
#line 241 "./cool.flex"
{ return OF; }
	YY_BREAK
/* NEW */
case 29:
YY_RULE_SETUP
#line 244 "./cool.flex"
{ return NEW; }
	YY_BREAK
/* ISVOID */
case 30:
YY_RULE_SETUP
#line 247 "./cool.flex"
{ return ISVOID; }
	YY_BREAK
/* NOT */
case 31:
YY_RULE_SETUP
#line 250 "./cool.flex"
{ return NOT; }
	YY_BREAK
/* INT_CONST */
case 32:
YY_RULE_SETUP
#line 254 "./cool.flex"
{
    cool_yylval.symbol = inttable.add_string(yytext);
    return INT_CONST;
}
	YY_BREAK
/* BOOL_CONST */
case 33:
YY_RULE_SETUP
#line 260 "./cool.flex"
{
    cool_yylval.boolean = 1;
    return BOOL_CONST;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 265 "./cool.flex"
{
    cool_yylval.boolean = 0;
    return BOOL_CONST;
}
	YY_BREAK
/* White Space */
case 35:
YY_RULE_SETUP
#line 271 "./cool.flex"
{ }
	YY_BREAK
/* TYPEID */
case 36:
YY_RULE_SETUP
#line 274 "./cool.flex"
{
    /* Lexer + Symbol Table task 2 */
    cool_yylval.symbol = idtable.add_string(yytext);
    return TYPEID;
}
	YY_BREAK
/* To treat lines. */
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 281 "./cool.flex"
{
    curr_lineno++;
}
	YY_BREAK
/* OBJECTID */
case 38:
YY_RULE_SETUP
#line 286 "./cool.flex"
{
    cool_yylval.symbol = idtable.add_string(yytext);
    return OBJECTID;
}
	YY_BREAK
/* =========
  * operators
  * =========
  */
/* ASSIGN */
case 39:
YY_RULE_SETUP
#line 297 "./cool.flex"
{ return ASSIGN; }
	YY_BREAK
/* LE */
case 40:
YY_RULE_SETUP
#line 300 "./cool.flex"
{ return LE; }
	YY_BREAK
/* DARROW */
case 41:
YY_RULE_SETUP
#line 303 "./cool.flex"
{ return DARROW; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 305 "./cool.flex"
{ return '+'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 307 "./cool.flex"
{ return '-'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 309 "./cool.flex"
{ return '*'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 311 "./cool.flex"
{ return '/'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 313 "./cool.flex"
{ return '<'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 315 "./cool.flex"
{ return '='; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 317 "./cool.flex"
{ return '.'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 319 "./cool.flex"
{ return ';'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 321 "./cool.flex"
{ return '~'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 323 "./cool.flex"
{ return '{'; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 325 "./cool.flex"
{ return '}'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 327 "./cool.flex"
{ return '('; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 329 "./cool.flex"
{ return ')'; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 331 "./cool.flex"
{ return ':'; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 333 "./cool.flex"
{ return '@'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 335 "./cool.flex"
{ return ','; }
	YY_BREAK
/* =====
  * error
  * =====
  */
case 58:
YY_RULE_SETUP
#line 342 "./cool.flex"
{
    yylval.error_msg = yytext;
    return ERROR;
}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 347 "./cool.flex"
ECHO;
	YY_BREAK
#line 2353 "cool-flex-lexer.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(INLINE_COMMENTS):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 625 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 625 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 624);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */
	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 347 "./cool.flex"


